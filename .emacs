;;; package  --- Summary
;;; Commentary:


;;; Code:
(add-to-list 'load-path "~/.emacs.d/custom/")

(load "~/.emacs.d/my-loadpackages.el")

(load "ruby.el")


;; Generic Settings
(setq make-backup-files nil) ;; disable backup files
(setq vc-follow-symlinks t) ;; disable backup files
(scroll-bar-mode -1) ;; Disable Scroll Bar
(tool-bar-mode -1)
(define-coding-system-alias 'UTF-8 'utf-8) ;; Add utf encoding support
(setq-default tab-width 2 indent-tabs-mode nil)
(setq inhibit-startup-message t) ;; hide splash screen
(setq gdb-many-windows t)
(global-set-key (kbd "s-f") 'toggle-frame-fullscreen) ;; Fullscreen shortcut
(set-language-environment 'utf-8) ;; UTF-8 Stuffs
(set-default-coding-systems 'utf-8)
(set-selection-coding-system 'utf-8)
(set-locale-environment "en.UTF-8")
(prefer-coding-system 'utf-8)
(server-start)


(require 'evil)
(evil-mode 1)
(setq evil-emacs-state-cursor '("#A6E22E" box))
(setq evil-normal-state-cursor '("#F92672" box))
(setq evil-visual-state-cursor '("#66D9EF" box))
(setq evil-insert-state-cursor '("#A6E22E" bar))
(setq evil-replace-state-cursor '("#A6E22E" bar))
(setq evil-operator-state-cursor '("#A6E22E" hollow))


;; Allow for looking up Documentation easily
(define-key evil-normal-state-map "K" 'dash-at-point)

(require 'smartparens)
(smartparens-global-mode t)

(require 'zone)
(zone-when-idle 120)

(require 'powerline-evil)
(require 'company)
(add-hook 'after-init-hook 'global-company-mode)

;; Syntastic
(require 'flycheck)
(global-flycheck-mode t)


(require 'rainbow-delimiters)
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

(require 'monokai-theme)

;; Eldoc:
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
(add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
(add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)

;;; Haskell-mode
(custom-set-variables
  '(haskell-process-suggest-remove-import-lines t)
  '(haskell-process-auto-import-loaded-modules t)
  '(haskell-process-log t))
(eval-after-load 'haskell-mode '(progn
  (define-key haskell-mode-map (kbd "C-c C-l") 'haskell-process-load-or-reload)
  (define-key haskell-mode-map (kbd "C-c C-z") 'haskell-interactive-switch)
  (define-key haskell-mode-map (kbd "C-c C-n C-t") 'haskell-process-do-type)
  (define-key haskell-mode-map (kbd "C-c C-n C-i") 'haskell-process-do-info)
  (define-key haskell-mode-map (kbd "C-c C-n C-c") 'haskell-process-cabal-build)
  (define-key haskell-mode-map (kbd "C-c C-n c") 'haskell-process-cabal)
  (define-key haskell-mode-map (kbd "SPC") 'haskell-mode-contextual-space)))
(eval-after-load 'haskell-cabal '(progn
  (define-key haskell-cabal-mode-map (kbd "C-c C-z") 'haskell-interactive-switch)
  (define-key haskell-cabal-mode-map (kbd "C-c C-k") 'haskell-interactive-mode-clear)
  (define-key haskell-cabal-mode-map (kbd "C-c C-c") 'haskell-process-cabal-build)
  (define-key haskell-cabal-mode-map (kbd "C-c c") 'haskell-process-cabal)))

;; ------------- AutoGenerated Stuffs -----------------
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   (quote
    ("0eebf69ceadbbcdd747713f2f3f839fe0d4a45bd0d4d9f46145e40878fc9b098" default)))
 '(haskell-mode-hook (quote (turn-on-haskell-indentation))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

(provide '.emacs)
;;; .emacs ends here
